Edited text from Wikipedia

Python is a widely used general purpose  high level programming language  Its design philosophy emphasizes code readability  and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C  The language provides constructs intended to enable clear programs on both a small and large scale 

Python supports multiple programming paradigms  including object oriented  imperative and functional programming or procedural styles  It features a dynamic type system and automatic memory management and has a large and comprehensive standard library 
Like other dynamic languages  Python is often used as a scripting language  but is also used in a wide range of non scripting contexts  Using third party tools  Python code can be packaged into standalone executable programs  such as Py2exe  or Pyinstaller   Python interpreters are available for many operating systems 
CPython  the reference implementation of Python  is free and open source software and has a community based development model  as do nearly all of its alternative implementations  CPython is managed by the non profit Python Software Foundation 

History
Guido van Rossum  the creator of Python
Python was conceived in the late 1980s and its implementation was started in December 1989 by Guido van Rossum at CWI in the Netherlands as a successor to the ABC language  itself inspired by SETL  capable of exception handling and interfacing with the Amoeba operating system  Van Rossum is Python s principal author  and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community  Benevolent Dictator for Life  BDFL  
Python 2 0 was released on 16 October 2000  with many major new features including a full garbage collector and support for Unicode  With this release the development process was changed and became more transparent and community backed 
Python 3 0  also called Python 3000 or py3k   a major  backwards incompatible release  was released on 3 December 2008 after a long period of testing  Many of its major features have been backported to the backwards compatible Python 2 6 and 2 7 
Features and philosophy

Python is a multi paradigm programming language  object oriented programming and structured programming are fully supported  and there are a number of language features which support functional programming and aspect oriented programming  including by metaprogramming and by magic methods   Many other paradigms are supported using extensions  including design by contract and logic programming 
Python uses dynamic typing and a combination of reference counting and a cycle detecting garbage collector for memory management  An important feature of Python is dynamic name resolution  late binding   which binds method and variable names during program execution 
The design of Python offers only limited support for functional programming in the Lisp tradition  The language has map    reduce   and filter   functions  comprehensions for lists  dictionaries  and sets  as well as generator expressions  The standard library has two modules  itertools and functools  that implement functional tools borrowed from Haskell and Standard ML 

The core philosophy of the language is summarized by the document  PEP 20  The Zen of Python    which includes aphorisms such as 
Beautiful is better than ugly 
Explicit is better than implicit 
Simple is better than complex 
Complex is better than complicated 
Readability counts 
Rather than requiring all desired functionality to be built into the language s core  Python was designed to be highly extensible  Python can also be embedded in existing applications that need a programmable interface  This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC  which espoused the opposite mindset  

While offering choice in coding methodology  the Python philosophy rejects exuberant syntax  such as in Perl  in favor of a sparser  less cluttered grammar  As Alex Martelli put it   To describe something as clever is not considered a compliment in the Python culture   Python s philosophy rejects the Perl  there is more than one way to do it  approach to language design in favor of  there should be one and preferably only one obvious way to do it  

Python s developers strive to avoid premature optimization  and moreover  reject patches to non critical parts of CPython which would offer a marginal increase in speed at the cost of clarity  When speed is important  Python programmers use PyPy  a just in time compiler  or move time critical functions to extension modules written in languages such as C  Cython is also available which translates a Python script into C and makes direct C level API calls into the Python interpreter 

An important goal of the Python developers is making Python fun to use  This is reflected in the origin of the name which comes from Monty Python  and in an occasionally playful approach to tutorials and reference materials  for example using spam and eggs instead of the standard foo and bar 

A common neologism in the Python community is pythonic  which can have a wide range of meanings related to program style  To say that code is pythonic is to say that it uses Python idioms well  that it is natural or shows fluency in the language  that it conforms with Python s minimalist philosophy and emphasis on readability  In contrast  code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic 
Users and admirers of Python most especially those considered knowledgeable or experienced are often referred to as Pythonists  Pythonistas  and Pythoneers 
Syntax and semantics

Main article  Python syntax and semantics
Python is intended to be a highly readable language  It is designed to have an uncluttered visual layout  frequently using English keywords where other languages use punctuation  Furthermore Python has a smaller number of syntactic exceptions and special cases than C or Pascal 

Indentation
Python uses whitespace indentation  rather than curly braces or keywords  to delimit blocks  a feature also termed the off side rule  An increase in indentation comes after certain statements  a decrease in indentation signifies the end of the current block  It is considered beneficial by Python programmers  others have criticized it 

Statements and control flow
Python s statements include  among others  
The if statement  which conditionally executes a block of code  along with else and elif  a contraction of else if  
The for statement  which iterates over an iterable object  capturing each element to a local variable for use by the attached block 
The while statement  which executes a block of code as long as its condition is true 
The try statement  which allows exceptions raised in its attached code block to be caught and handled by except clauses  it also ensures that clean up code in a finally block will always be run regardless of how the block exits 
The class statement  which executes a block of code and attaches its local namespace to a class  for use in object oriented programming 
The def statement  which defines a function or method 
The with statement  from Python 2 5   which encloses a code block within a context manager  for example  acquiring a lock before the block of code is run and releasing the lock afterwards  or opening a file and then closing it   allowing RAII like behavior 
The pass statement  which serves as a NOP  It is syntactically needed to create an empty code block 
The assert statement  used during debugging to check for conditions that ought to apply 
The yield statement  which returns a value from a generator function  From Python 2 5  yield is also an operator  This form is used to implement coroutines 
The import statement  which is used to import modules whose functions or variables can be used in the current program 
Python does not support tail call optimization or first class continuations  and  according to Guido van Rossum  it never will  However  better support for coroutine like functionality is provided in 2 5  by extending Python s generators  Prior to 2 5  generators were lazy iterators  information was passed unidirectionally out of the generator  As of Python 2 5  it is possible to pass information back into a generator function  and as of Python 3 3  the information can be passed through multiple stack levels 

Expressions
Python expressions are similar to languages such as C and Java 
In Python 2  the   operator on integers does integer division  it truncates the result to an integer  Floating point division on integers can be achieved by converting one of the integers to a float  e g  float x    y   In Python 3  the result of   is always a floating point value  This behaviour can be enabled in Python 2 2  using from   future   import division  In both Python 2 2  and Python 3     can be used to do integer division 
In Python     compares by value  in contrast to Java  where it compares by reference   Value comparisons in Java use the equals   method   Python s is operator may be used to compare object identities  comparison by reference   Comparisons may be chained  for example a    b    c 
Python uses the words and  or  not for its boolean operators rather than the symbolic           used in Java and C 
Python has a type of expression termed a list comprehension  Python 2 4 extended list comprehensions into a more general expression termed a generator expression 
Anonymous functions are implemented using lambda expressions  however  these are limited in that the body can only be a single expression 
Conditional expressions in Python are written as x if c else y  different in order of operands from the    operator common to many other languages  
Python makes a distinction between lists and tuples  Lists are written as  1  2  3   are mutable  and cannot be used as the keys of dictionaries  dictionary keys must be immutable in Python   Tuples are written as  1  2  3   are immutable and thus can be used as the keys of dictionaries  provided all elements of the tuple are immutable  The parentheses around the tuple are optional in some contexts  Tuples can appear on the left side of an equal sign  hence a statement like x  y   y  x can be used to swap two variables 
Python has a  string format  operator    This functions analogous to printf format strings in C  e g   foo  s bar  d      blah   2  evaluates to  foo blah bar 2   In Python 3 and 2 6   this was supplemented by the format   method of the str class  e g   foo  0  bar  1   format  blah   2  

Python has various kinds of string literals 
Strings delimited by single or double quotation marks  Unlike in Unix shells  Perl and Perl influenced languages  single quotation marks and double quotation marks function similarly  Both kinds of string use the backslash     as an escape character and there is no implicit string interpolation such as   foo  
Triple quoted strings  which begin and end with a series of three single or double quotation marks  They may span multiple lines and function like here documents in shells  Perl and Ruby 

Raw string varieties  denoted by prefixing the string literal with an r  No escape sequences are interpreted  hence raw strings are useful where literal backslashes are common  such as regular expressions and Windows style paths  Compare    quoting  in C  
Python has index and slice expressions on lists  denoted as a key   a start stop  or a start stop step   Indexes are zero based  and negative indexes are relative to the end  Slices take elements from the start index up to  but not including  the stop index  The third slice parameter  called step or stride  allows elements to be skipped and reversed  Slice indexes may be omitted  for example a    returns a copy of the entire list  Each element of a slice is a shallow copy 
In Python  a distinction between expressions and statements is rigidly enforced  in contrast to languages such as Common Lisp  Scheme  or Ruby  This leads to some duplication of functionality  For example 
List comprehensions vs  for loops
Conditional expressions vs  if blocks
The eval   vs  exec   built in functions  in Python 2  exec is a statement   the former is for expressions  the latter is for statements 
Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions  all being expressions  cannot contain statements  A particular case of this is that an assignment statement such as a   1 cannot form part of the conditional expression of a conditional statement  This has the advantage of avoiding a classic C error of mistaking an assignment operator   for an equality operator    in conditions  if  c   1          is valid C code but if c   1      causes a syntax error in Python 

Methods
Methods on objects are functions attached to the object s class  the syntax instance method argument  is  for normal methods and functions  syntactic sugar for Class method instance  argument   Python methods have an explicit self parameter to access instance data  in contrast to the implicit self in some other object oriented programming languages  for example  Java  C   or Ruby  

Typing
Python uses duck typing and has typed objects but untyped variable names  Type constraints are not checked at compile time  rather  operations on an object may fail  signifying that the given object is not of a suitable type  Despite being dynamically typed  Python is strongly typed  forbidding operations that are not well defined  for example  adding a number to a string  rather than silently attempting to make sense of them 
Python allows programmers to define their own types using classes  which are most often used for object oriented programming  New instances of classes are constructed by calling the class  for example  SpamClass   or EggsClass     and the classes themselves are instances of the metaclass type  itself an instance of itself   allowing metaprogramming and reflection 

Prior to version 3 0  Python had two kinds of classes   old style  and  new style   Old style classes were eliminated in Python 3 0  making all classes new style  In versions between 2 2 and 3 0  both kinds of classes could be used  The syntax of both styles is the same  the difference being whether the class object is inherited from  directly or indirectly  all new style classes inherit from object and are instances of type  

Article taken from Wikipedia 2013

